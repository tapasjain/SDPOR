#include <cassert>
#include <cstring>

#include <utility>
#include <string>
#include <map>
#include <iostream>
#include <iomanip>
#include <fstream>
#include <sstream>

#include <signal.h>
#include <netinet/in.h>
#include <sys/time.h>
#include <sys/ioctl.h>
#include <sys/wait.h>
#include <unistd.h>

#include "scheduler.hh"
#include "next_state.hh"

using namespace std;

extern Scheduler* g_scheduler;
extern int verboseLevel;


inline void verbose(int level, string str)
{
  if (verboseLevel >= level)
    cout << str << endl;
}


/////////////////////////////////////////////////////////////////////////////
//
// some signal handlers for cleaning up
// 
/////////////////////////////////////////////////////////////////////////////

void sig_alarm(int signo)
{
  //g_scheduler->resetReplayStatus();
}


void sig_int(int signo)
{
  cout << "sig_int is fired .... !\n";
  g_scheduler->stop();

  cout << "Total number of runs:  " << g_scheduler->run_counter << endl;
  if (setting.stateful_flag){
    cout << "Total number of states: " << g_scheduler->num_of_states << endl;
    cout << "Truncated Branches: " << g_scheduler->num_of_truncated_branches << endl;
  }

  cout << "Transitions explored: " << g_scheduler->num_of_transitions << endl;
  
  cout << g_scheduler->state_stack.toString() << endl;
  exit(0);
}

void sig_abort(int signo)
{
  cout << "sig_abort is fired .... !\n";
  g_scheduler->stop();
  //cout << g_scheduler->state_stack.toString() << endl;
  exit(-1);
}


void sig_pipe(int signo)
{
  throw SocketException("unknow");
}


//////////////////////////////////////////////////////////////////////////////
//
//     The implementation of Scheduler
// 
//////////////////////////////////////////////////////////////////////////////

Scheduler::Scheduler()
  : max_tolerated_errors(1),
    num_of_errors_detected(0),
    num_of_transitions(0),
    num_of_states(0),
    num_of_truncated_branches(0),
    num_killed(0),
    sut_pid(-1), 
    run_counter(1)
{   
  sigset_t  sst;
  int retval;

  sigemptyset(&sst);
  sigaddset(&sst, SIGPIPE);
  retval = sigprocmask(SIG_BLOCK, &sst, NULL);
  assert(retval != -1);
  
  retval = pthread_sigmask(SIG_BLOCK, &sst, NULL);
  assert(retval  != -1);

  
  signal(SIGINT, sig_int);
  signal(SIGABRT,sig_abort);
}


Scheduler::~Scheduler()
{ }


/**
 *  set up the server socket for listening 
 * 
 */
bool Scheduler::init()
{
  int retval;
  char buf[64];

  setenv("INSPECT_SOCKET_FILE", setting.socket_file.c_str(), 1);

  memset(buf, 0, sizeof(buf));
  sprintf(buf, "%d", setting.timeout_val);
  setenv("INSPECT_TMEOUT_VAL",  buf, 1);

  memset(buf, 0, sizeof(buf));
  sprintf(buf, "%d", setting.max_threads);
  setenv("INSPECT_BACKLOG_NUM", buf, 1);

  memset(buf, 0, sizeof(buf));
  sprintf(buf, "%d",  (int)setting.stateful_flag);
  setenv("INSPECT_STATEFUL_FLAG", buf, 1);
  
  
  max_tolerated_errors = setting.max_errors;

  retval = event_buffer.init(setting.socket_file, 
			     setting.timeout_val, 
			     setting.max_threads);

  assert( retval );
  return true;
}



void Scheduler::stop()
{
  event_buffer.close();
}


/** 
 *  Restart the system under test
 */
void Scheduler::exec_test_target(const char* path)
{
  int retval;
  int pid = fork();
  if (pid == 0){
    int sub_pid = fork();
    if ( sub_pid == 0 ){
      //retval = ::execl(path, path, NULL);
      retval = ::execvp( setting.target_argv[0], setting.target_argv);
      assert( retval != -1 );
    }
    else{
      ofstream  os(".subpid");
      os << sub_pid << endl;
      os.close();
      exit(0);
    }
  }
  else{    
    waitpid(pid, NULL, 0);
    ifstream is(".subpid");
    int sub_pid;
    is >> sub_pid;
    //cout << " sub_pid = " << sub_pid <<endl;
    system("rm -f .subpid");
    is.close();

    sut_pid = sub_pid;
  }
}


void Scheduler::run()
{
  cout <<" === run "<< run_counter <<" ===\n"; 
  this->monitor_first_run();

  verbose(1, state_stack.toString2());

  while ( state_stack.has_backtrack_points() ){
    run_counter++;
    
    if (num_of_errors_detected >= max_tolerated_errors) break;

    //if (run_counter % 10 == 0)
      cout <<" === run "<< run_counter <<" ===\n";    
    this->backtrack_checking();        
  } 
  
  cout << "Total number of runs:  " << run_counter  
       << ",   killed-in-the-middle runs: " << num_killed << endl;
  cout << "Transitions explored: " << num_of_transitions << endl;
}



void Scheduler::exec_transition(InspectEvent & event)
{
  //this->approve_event(event);
  //cout << event.toString() << endl;
  event_buffer.approve(event);
}


State * Scheduler::get_initial_state()
{
  State * init_state;
  
  InspectEvent event;

  init_state = new State();
  event = event_buffer.get_the_first_event();  
  assert(event.type == THREAD_START);
  assert(event.thread_id == 0);
 
  init_state->add_to_enabled(event);
  init_state->clock_vectors.add_the_first_thread();
  
  return init_state;
}


InspectEvent Scheduler::get_latest_executed_event_of_thread(State * state, int thread_id)
{
  State * ptr;
  InspectEvent dummy;

  ptr = state;
  while (ptr != NULL){
    if (ptr->sel_event.thread_id == thread_id)  return ptr->sel_event;
    ptr = ptr->prev;
  }

  return dummy;
}


void Scheduler::check_race(State * state)
{
  if (state->check_race()  &&  ! setting.deadlock_only_flag){
    num_of_errors_detected++;
    cout << state_stack.toString3() << endl;

  }
}



void Scheduler::monitor_first_run()
{
  int thread_counter = 0;

  int step_counter = 0;
  InspectEvent event;
  State * init_state, *new_state, * current_state;
  TransitionSet::iterator tit;

  this->exec_test_target( setting.target.c_str() );

  init_state = this->get_initial_state();

  state_stack.push(init_state);

  //cout << " num of threads = " << thread_counter << flush << endl;

  try{
    current_state = state_stack.top();
    while (!current_state->is_enabled_empty()){
      for (tit = current_state->prog_state->enabled.begin();
	   tit != current_state->prog_state->enabled.end();
	   tit++)
	{
	  event = tit->second;
	  update_backtrack_info(current_state, event);
	}
      
      event = current_state->prog_state->enabled.get_transition();
      
      assert(current_state->clock_vectors.size() > 0);

//       if (current_state->check_race()){
// 	cout << state_stack.toString3() << endl;
//       }
      this->check_race(current_state);
      if (found_enough_error()){
	kill(sut_pid, SIGTERM);	
	return;
      }

      new_state = next_state(current_state, event, event_buffer);

      // added about event graph
      num_of_transitions++;

      if (event.type == THREAD_START) thread_counter++;

//       verbose(0, current_state->sel_event.toString());
//       verbose(2, current_state->toString());
      
//       cout << "--------------- " << step_counter++ << ": " << event.toString() << " ---------\n"
// 	   << state_stack.toString2() << endl;
      
      state_stack.push(new_state);
      assert(new_state->prev == current_state);
      current_state = new_state;
    }
  }
  catch (DeadlockException & e){
    kill(sut_pid, SIGTERM);
    sut_pid = -1;
  }

  //cout << state_stack.toString() << endl;

  // cout << " num of threads = " << thread_counter << flush << endl;

}


bool Scheduler::examine_state(State * old_state, State * new_state)
{
  return false;
}


void  Scheduler::filter_auxiliary_events(InspectEvent &event)
{
  InspectEvent new_event;

  if (event.type == SYMM_POINT){
    exec_transition(event);
    new_event = event_buffer.get_event(event.thread_id);
  }
  else
    new_event = event;
  
  event = new_event;
}


void Scheduler::backtrack_checking()
{
  State * state = NULL, * current_state = NULL, *new_state = NULL;
  InspectEvent event, event2;
  int depth, i;
  
  event_buffer.reset();
  thread_table.reset();

  state = state_stack.top();
  while (state != NULL && state->backtrack.empty()){
    state_stack.pop();
    delete state;
    state = state_stack.top();
  }  
  depth = state_stack.depth();

  this->exec_test_target( setting.target.c_str() );  
  event = event_buffer.get_the_first_event();
  exec_transition(event);
  
  // cout << state_stack.toString() << endl;

  for (i = 1; i < depth - 1; i++){    
    state = state_stack[i];
//     verbose(0, event.toString());
    if (state->sel_event.type == THREAD_CREATE){
      event = state->sel_event;
      InspectEvent pre, post, first;
      pre = event_buffer.get_event(event.thread_id);
      exec_transition(pre);
      
      post = event_buffer.get_event(event.thread_id);
      exec_transition(post);

      first = event_buffer.get_event(event.child_id);
      string thread_nm;
      
      filter_auxiliary_events(first);

      exec_transition(first);
      
      thread_table.add_thread(post.child_id, thread_nm, post.thread_arg);	
    }
    else{
      event = event_buffer.get_event(state->sel_event.thread_id);
      filter_auxiliary_events(event);

      assert( event.valid() );      
      assert( event == state->sel_event );      
      exec_transition(event);
    }
  }

  assert( state_stack[depth-1] == state_stack.top() );

  state = state_stack.top();  

  TransitionSet::iterator it;
  for (it = state->prog_state->enabled.begin();
       it != state->prog_state->enabled.end(); it++){
    event = it->second;
    event2 = event_buffer.get_event(event.thread_id);
    
    filter_auxiliary_events(event2);

    assert(event == event2);
    //cout << " ++++ " << event2.toString() << endl;
  }
  
  for (it = state->prog_state->disabled.begin(); 
       it != state->prog_state->disabled.end(); it++){
    event = it->second;
    event2 = event_buffer.get_event(event.thread_id);
    
    filter_auxiliary_events(event2);
    assert(event == event2);
  }

  event = state->backtrack.get_transition();   
  assert(event.valid());
  state->backtrack.remove(event);
  
//   verbose(0, event.toString());

  this->check_race(state);
  if (found_enough_error()){
     kill(sut_pid, SIGTERM);
     return;
  }
  
  current_state = next_state(state, event, event_buffer);

  num_of_transitions++;
  //   important!! we need to be careful here, 
  //   to put backtrack transition into 
  state->sleepset.remove(event);    
  state_stack.push( current_state);
  

  cout << "<< \n";
  while (current_state->has_executable_transition()){
    TransitionSet::iterator tit;
    for (tit = current_state->prog_state->enabled.begin(); 
	 tit != current_state->prog_state->enabled.end();
	 tit++){
      event = tit->second;
      update_backtrack_info(current_state, event);
    }
    
    event = current_state->get_transition();
//     verbose(0, event.toString());

    
    this->check_race(state);
    if (found_enough_error()){
      kill(sut_pid, SIGTERM);
      return;
    }
    

    new_state = next_state(current_state, event, event_buffer);
    num_of_transitions++;
    state_stack.push(new_state);
    current_state = new_state;
  }

  //cout << state_stack.toString() << endl;

  verbose(1, state_stack.toString2());

  if (!current_state->prog_state->disabled.empty() && 
      current_state->sleepset.empty()){

    if (!setting.race_only_flag){
      num_of_errors_detected++;
      
      cout <<"Found a deadlock!!\n";
      cout << state_stack.toString3() << endl;
    }
    
  }

  if (!current_state->has_been_end()){
    kill(sut_pid, SIGTERM);
    //cout << "Kill  " << sut_pid << flush << endl;
    num_killed++;
  }
    
}


void Scheduler::get_mutex_protected_events(State * state1, 
					   State * state2, 
					   int tid, 
					   vector<InspectEvent> & events)
{
  State * state = NULL;
  
  assert(state1 != NULL);
  assert(state2 != NULL);
  
  events.clear();
  state = state1->next;  
  while (state != state2){
    if (state->sel_event.thread_id == tid)
      events.push_back(state->sel_event);
    state = state->next;
  }

  assert( state == state2);
}



void Scheduler::update_backtrack_info(State * state, InspectEvent &event)
{
  standard_update_backtrack_info(state, event);
}



bool Scheduler::is_mutex_exclusive_locksets(Lockset * lockset1, Lockset * lockset2)
{
  if (lockset1 == NULL || lockset2 == NULL) 
    return false;
  return lockset1->mutual_exclusive(*lockset2);
}



void Scheduler::standard_update_backtrack_info(State * state, InspectEvent &event)
{
  State * old_state;
  InspectEvent alt_event;
  Lockset * lockset1, *lockset2;
  ClockVector * vec1, *vec2;

  old_state = state->prev;
  while (old_state != NULL){
    if ( dependent(old_state->sel_event, event) ) break;
    old_state = old_state->prev;
  }

  if (old_state == NULL)  return;

  alt_event = old_state->prog_state->enabled.get_transition(event.thread_id);
  if (alt_event.invalid()){
    lockset1 = old_state->get_lockset(old_state->sel_event.thread_id);
    lockset2 = state->get_lockset(event.thread_id);
    if (is_mutex_exclusive_locksets(lockset1, lockset2)) return;
    
    vec1 = old_state->get_clock_vector(old_state->sel_event.thread_id);
    vec2 = state->get_clock_vector(event.thread_id);
    if (! vec1->is_concurrent_with(*vec2) ) return;

    TransitionSet::iterator tit;
    InspectEvent tmp_ev;

    for (tit = old_state->prog_state->enabled.begin(); 
	 tit != old_state->prog_state->enabled.end(); tit++){
      tmp_ev = tit->second;
      if (tmp_ev.invalid()) continue;
      if (old_state->done.has_member(tmp_ev)) continue;
      if (old_state->sleepset.has_member(tmp_ev)) continue;
      old_state->backtrack.insert(tmp_ev);

    }
    return;
  }

  if (alt_event.thread_id == old_state->sel_event.thread_id) return;
  
  if (old_state->sleepset.has_member(alt_event)) return;
  if (old_state->done.has_member(alt_event) || old_state->backtrack.has_member(alt_event)) return;
  
  lockset1 = old_state->get_lockset(old_state->sel_event.thread_id);
  lockset2 = state->get_lockset(event.thread_id);
  if (is_mutex_exclusive_locksets(lockset1, lockset2)) return;
  
  vec1 = old_state->get_clock_vector(old_state->sel_event.thread_id);
  vec2 = state->get_clock_vector(event.thread_id);
  if (! vec1->is_concurrent_with(*vec2) ) return;
  
  if (setting.symmetry_flag){
    if (thread_table.is_symmetric_threads(alt_event.thread_id,  old_state->sel_event.thread_id)){
      InspectEvent symm1, symm2;
      symm1 = old_state->symmetry.get_transition(alt_event.thread_id);
      symm2 = old_state->symmetry.get_transition(old_state->sel_event.thread_id);
      if (symm1.valid() && symm2.valid() &&  symm1.obj_id == symm2.obj_id)
	return;
    }
  }
  
  old_state->backtrack.insert(alt_event);
}




bool Scheduler::dependent(InspectEvent &e1, InspectEvent &e2)
{
  bool retval = false;

  retval = e1.dependent(e2);

//   cout << "e1: " << e1.toString() << "  "
//        << "e2: " << e2.toString() << "  " << (retval? "true" : "false") << endl;
 
  return retval;
}


